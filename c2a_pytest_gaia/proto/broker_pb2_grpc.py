# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import broker_pb2 as broker__pb2


class BrokerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PostCommand = channel.unary_unary(
            "/broker.Broker/PostCommand",
            request_serializer=broker__pb2.PostCommandRequest.SerializeToString,
            response_deserializer=broker__pb2.PostCommandResponse.FromString,
        )
        self.OpenTelemetryStream = channel.unary_stream(
            "/broker.Broker/OpenTelemetryStream",
            request_serializer=broker__pb2.TelemetryStreamRequest.SerializeToString,
            response_deserializer=broker__pb2.TelemetryStreamResponse.FromString,
        )
        self.GetLastReceivedTelemetry = channel.unary_unary(
            "/broker.Broker/GetLastReceivedTelemetry",
            request_serializer=broker__pb2.GetLastReceivedTelemetryRequest.SerializeToString,
            response_deserializer=broker__pb2.GetLastReceivedTelemetryResponse.FromString,
        )
        self.OpenCommandStream = channel.stream_stream(
            "/broker.Broker/OpenCommandStream",
            request_serializer=broker__pb2.CommandStreamRequest.SerializeToString,
            response_deserializer=broker__pb2.CommandStreamResponse.FromString,
        )
        self.PostTelemetry = channel.unary_unary(
            "/broker.Broker/PostTelemetry",
            request_serializer=broker__pb2.PostTelemetryRequest.SerializeToString,
            response_deserializer=broker__pb2.PostTelemetryResponse.FromString,
        )


class BrokerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PostCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OpenTelemetryStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLastReceivedTelemetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OpenCommandStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PostTelemetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "PostCommand": grpc.unary_unary_rpc_method_handler(
            servicer.PostCommand,
            request_deserializer=broker__pb2.PostCommandRequest.FromString,
            response_serializer=broker__pb2.PostCommandResponse.SerializeToString,
        ),
        "OpenTelemetryStream": grpc.unary_stream_rpc_method_handler(
            servicer.OpenTelemetryStream,
            request_deserializer=broker__pb2.TelemetryStreamRequest.FromString,
            response_serializer=broker__pb2.TelemetryStreamResponse.SerializeToString,
        ),
        "GetLastReceivedTelemetry": grpc.unary_unary_rpc_method_handler(
            servicer.GetLastReceivedTelemetry,
            request_deserializer=broker__pb2.GetLastReceivedTelemetryRequest.FromString,
            response_serializer=broker__pb2.GetLastReceivedTelemetryResponse.SerializeToString,
        ),
        "OpenCommandStream": grpc.stream_stream_rpc_method_handler(
            servicer.OpenCommandStream,
            request_deserializer=broker__pb2.CommandStreamRequest.FromString,
            response_serializer=broker__pb2.CommandStreamResponse.SerializeToString,
        ),
        "PostTelemetry": grpc.unary_unary_rpc_method_handler(
            servicer.PostTelemetry,
            request_deserializer=broker__pb2.PostTelemetryRequest.FromString,
            response_serializer=broker__pb2.PostTelemetryResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "broker.Broker", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Broker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PostCommand(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/broker.Broker/PostCommand",
            broker__pb2.PostCommandRequest.SerializeToString,
            broker__pb2.PostCommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OpenTelemetryStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/broker.Broker/OpenTelemetryStream",
            broker__pb2.TelemetryStreamRequest.SerializeToString,
            broker__pb2.TelemetryStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLastReceivedTelemetry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/broker.Broker/GetLastReceivedTelemetry",
            broker__pb2.GetLastReceivedTelemetryRequest.SerializeToString,
            broker__pb2.GetLastReceivedTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OpenCommandStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/broker.Broker/OpenCommandStream",
            broker__pb2.CommandStreamRequest.SerializeToString,
            broker__pb2.CommandStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PostTelemetry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/broker.Broker/PostTelemetry",
            broker__pb2.PostTelemetryRequest.SerializeToString,
            broker__pb2.PostTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
